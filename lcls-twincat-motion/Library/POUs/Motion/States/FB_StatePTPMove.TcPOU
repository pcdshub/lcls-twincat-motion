<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_StatePTPMove" Id="{a935a12e-6ee3-4ebb-8c29-e9b23b7cef37}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StatePTPMove
// For your pytmc pragma on this block, specify io accordingly:
// 1. use input or i if you want the set position to be immutable
// 2. use io if you want to set position to be mutable from epics
VAR_INPUT
	{attribute 'pytmc' := '
		pv: INFO
	'}
	stPositionState: DUT_PositionState;
	
	{attribute 'pytmc' := '
		pv: EXEC
		io: io
	'}
	bExecute: BOOL;
	
	{attribute 'pytmc' := '
		pv: EPS_OK
		io: input
	'}
	bEPSOk: BOOL;
END_VAR
VAR_IN_OUT
	stMotionStage: DUT_MotionStage;
END_VAR
VAR_OUTPUT
	{attribute 'pytmc' := '
		pv: AT_STATE
		io: input
	'}
	bAtState: BOOL;
	
	{attribute 'pytmc' := '
		pv: DMOV
		io: input
	'}
	bDone: BOOL;
	
	{attribute 'pytmc' := '
		pv: BUSY
		io: input
	'}
	bBusy: BOOL;
	
	{attribute 'pytmc' := '
		pv: ERR
		io: input
	'}
	bError: BOOL;
	
	{attribute 'pytmc' := '
		pv: ERRMsg
		io: input
	'}
	sError: STRING;
END_VAR
VAR
	bExecTrig: R_TRIG;
	bExecEnd: F_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF stPositionState.bValid THEN
	bExecTrig(CLK:=bExecute);
	IF bExecTrig.Q AND bEPSOk THEN
		IF NOT stMotionStage.bBusy AND NOT stMotionStage.bError THEN
			stMotionStage.bExecute := TRUE;
			stMotionStage.nCommand := ENUM_EpicsMotorCmd.EPICS_MOTOR_MOVE_ABS;
			stMotionStage.fPosition := stPositionState.fPosition;
			stMotionStage.fVelocity := stPositionState.fVelocity;
			stMotionStage.fAcceleration := stPositionState.fAccel;
			stMotionStage.fDeceleration := stPositionState.fDecel;
			bDone := FALSE;
			bBusy := TRUE;
		END_IF
	END_IF
	bError := stMotionStage.bError;
	sError := stMotionStage.sErrorMessage;
	
	bAtState := F_AtPosState(stPositionState:=stPositionState, stMotionStage:=stMotionStage);
	IF bAtState AND NOT stMotionStage.bBusy THEN
		bDone := TRUE;
		bBusy := FALSE;
		bExecute := FALSE;
	END_IF
	
	bExecEnd(CLK:=bExecute);
	IF bExecEnd.Q AND bBusy THEN
		stMotionStage.bExecute := FALSE;
	END_IF
	
	IF NOT stMotionStage.bExecute OR NOT bExecute THEN
		bDone := TRUE;
		bBusy := FALSE;
		bExecute := FALSE;
	END_IF
ELSE
	bDone := FALSE;
	bBusy := FALSE;
	bError := TRUE;
	sError := 'State Invalid';
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>