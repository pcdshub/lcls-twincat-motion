<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_MotionInterlocksLimSw" Id="{ab1eea97-93e4-4c0c-8db0-34c18716f063}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MotionInterlocksLimSw EXTENDS FB_MotionInterlocks IMPLEMENTS I_MotionInterlocksLimSw
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    {attribute 'hide'}
    bLimHit : BOOL;
    {attribute 'hide'}
    ftForwardEnabled : F_TRIG;
    {attribute 'hide'}
    ftBackwardEnabled : F_TRIG;
    {attribute 'hide'}
    rtUserExec : R_TRIG;
    {attribute 'hide'}
    bLimHitIdling : BOOL;
    {attribute 'hide'}
    bLimHitMoving : BOOL;
    {attribute 'hide'}
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[bAllBackwardEnabled := iMotionInterlocksShareData.LimBackward;
bAllForwardEnabled := iMotionInterlocksShareData.LimForward;

rtUserExec (CLK:=iMotionInterlocksShareData.NewMoveReq);
ftForwardEnabled(CLK:=bAllForwardEnabled);
ftBackwardEnabled (CLK:=bAllBackwardEnabled);

IF (ftForwardEnabled.Q AND iMotionInterlocksShareData.PositiveDirection)
        OR (ftBackwardEnabled.Q AND iMotionInterlocksShareData.NegativeDirection)
        AND NOT iMotionInterlocksShareData.HomeBusy  THEN
    // Not an error, just a warning
    IF NOT bAllForwardEnabled THEN
            sMessage:='Cannot move past positive limit.';
    ELSIF NOT bAllBackwardEnabled THEN
            sMessage:='Cannot move past Negative limit.';
    END_IF
    bError:=FALSE;
    nErrorID:=0;
    bMoveOk := FALSE;
    bWarning:=TRUE;
    bLimHit := TRUE;
    bLimHitMoving:=TRUE;
// Todo: axis idling, critical limit disable faillure
// clear previous warning and limit hit events with each new request
ELSIF rtUserExec.Q THEN
    bLimHit := FALSE;
    bLimHitMoving := bLimHit;
    bLimHitIdling := bLimHit;
    sMessage := '';
    bWarning := FALSE;
    bMoveOk := TRUE;
END_IF

]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{38e6bf01-9589-4a1c-9785-544008f3c50a}">
      <Declaration><![CDATA[(*FB_Init is always available implicitly and it is used primarily for initialization.
The return value is not evaluated. For a specific influence, you can also declare the
methods explicitly and provide additional code there with the standard initialization
code. You can evaluate the return value.*)
METHOD FB_Init : BOOL
VAR_INPUT
    (* TRUE: the retain variables are initialized (reset warm / reset cold)*)
    bInitRetains	: BOOL;
    (* TRUE: the instance will be copied to the copy code afterward (online change)*)
    bInCopyCode	: BOOL;
    iMotionLogger	: I_MotionLogger;
    iMotionInterlocksShareData	: I_MotionInterlocksShareData;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="LimHit" Id="{b22eb30d-2c17-4d42-a133-75c5bf60ab7c}">
      <Declaration><![CDATA[PROPERTY LimHit : BOOL
]]></Declaration>
      <Get Name="Get" Id="{dfe37661-15a3-4d8f-894b-bbb5931b16c9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[LimHit := bLimHit ;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="LimHitIdling" Id="{fccab217-0a86-4ce2-a8c8-5f21dbd772f1}">
      <Declaration><![CDATA[PROPERTY LimHitIdling : BOOL
]]></Declaration>
      <Get Name="Get" Id="{936d1c01-3641-40d9-9df4-6558831cd9ef}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[LimHitIdling := bLimHitIdling;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="LimHitMoving" Id="{9474a8dc-3666-4452-97f6-1ec2b2ea8a29}">
      <Declaration><![CDATA[PROPERTY LimHitMoving : BOOL
]]></Declaration>
      <Get Name="Get" Id="{b27429de-f0f5-434f-a3d9-b6d6c54a707c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[LimHitMoving := bLimHitMoving;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MoveOk" Id="{936c6318-45c0-448e-be67-2dffa4e4e57d}">
      <Declaration><![CDATA[METHOD MoveOk : BOOL
VAR_INPUT
    NewMoveReq	: BOOL;
    Enable	: BOOL;
    Execute	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>