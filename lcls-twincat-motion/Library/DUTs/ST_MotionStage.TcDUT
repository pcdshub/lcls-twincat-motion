<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <DUT Name="ST_MotionStage" Id="{10b5775d-5646-4d55-ad77-40abc3888de3}">
    <Declaration><![CDATA[TYPE ST_MotionStage :
    // Defines the EPICS interface to moving a motor in TwinCAT
STRUCT
    (* Hardware *)

    // PLC Axis Reference
    Axis: AXIS_REF;
    // NC Forward Limit Switch: TRUE if ok to move
    bLimitForwardEnable AT %I*: BOOL;
    // NC Backward Limit Switch: TRUE if ok to move
    bLimitBackwardEnable AT %I*: BOOL;
    // NO Home Switch: TRUE if at home
    bHome AT %I*: BOOL;
    // NC Brake Output: TRUE to release brake
    bBrakeRelease AT %Q*: BOOL;
    // NC STO Input: TRUE if ok to move
    {attribute 'pytmc' := '
        pv: PLC:bHardwareEnable
        io: i
        field: ZNAM FALSE
        field: ONAM TRUE
        field: DESC TRUE if STO not hit
    '}
    bHardwareEnable AT %I*: BOOL;

    // Raw encoder IO for ULINT (Biss-C)
    nRawEncoderULINT AT %I*: ULINT;
    // Raw encoder IO for UINT (Relative Encoders)
    nRawEncoderUINT AT %I*: UINT;
    // Raw encoder IO for INT (LVDT)
    nRawEncoderINT AT %I*: INT;

    (* Psuedo-hardware *)

    // Forward enable EPS summary
    bAllForwardEnable: BOOL:=FALSE;
    // Backward enable EPS summary
    bAllBackwardEnable: BOOL:=FALSE;
    // Enable EPS summary encapsulating emergency stop button and any additional motion preventive hardware
    bAllEnable: BOOL:=FALSE;
    // Forward virtual gantry limit switch
    bGantryForwardEnable: BOOL:=FALSE;
    // Backward virtual gantry limit switch
    bGantryBackwardEnable: BOOL:=FALSE;
    // Encoder count summary, if linked above
    {attribute 'pytmc' := '
        pv: PLC:nEncoderCount
        io: i
        field: DESC Count from encoder hardware
    '}
    nEncoderCount: UDINT;
    // Forward Enable EPS struct
    {attribute 'pytmc' := '
        pv: PLC:stEPSF
        io: i
        field: DESC Forward Enable Interlocks
    '}
    stEPSForwardEnable: DUT_EPS;
    // Backward Enable EPS struct
    {attribute 'pytmc' := '
        pv: PLC:stEPSB
        io: i
        field: DESC Backward Enable Interlocks
    '}
    stEPSBackwardEnable: DUT_EPS;
    // Power Enable EPS struct
    {attribute 'pytmc' := '
        pv: PLC:stEPSP
        io: i
        field: DESC Power Interlocks
    '}
    stEPSPowerEnable: DUT_EPS;

    (* Settings *)
    // Name to use for log messages, fast faults, etc.
    sName: STRING;
    // If TRUE, we want to enable the motor independently of PMPS or other safety systems.
    bPowerSelf: BOOL:=FALSE;
    // Determines when we automatically enable the motor
    nEnableMode: E_StageEnableMode:=E_StageEnableMode.DURING_MOTION;
    // Determines when we automatically disengage the brake
    nBrakeMode: E_StageBrakeMode:=E_StageBrakeMode.IF_ENABLED;
    // Determines our encoder homing strategy
    nHomingMode: E_EpicsHomeCmd:=E_EpicsHomeCmd.NONE;
    // Set true to activate gantry EPS
    bGantryAxis: BOOL:=FALSE;

    // Set to gantry difference tolerance
    nGantryTol: LINT:=0;

    // Encoder count at which this axis is aligned with other axis
    nEncRef: ULINT:=0;

    (* Commands *)
    // Used internally to request enables
    bEnable: BOOL;
    // Used internally to reset errors and other state
    {attribute 'pytmc' := '
        pv: PLC:bReset
        io: io
        field: ZNAM FALSE
        field: ONAM TRUE
        field: DESC Used internally to reset errors
    '}
    bReset: BOOL;
    // Used internally and by the IOC to start or stop a move
    bExecute: BOOL;
    // Used by the IOC to disable an axis
    {attribute 'pytmc' := '
        pv: PLC:bUserEnable
        io: io
        field: ZNAM DISABLE
        field: ONAM ENABLE
        field: DESC Used to disable power entirely for an axis
    '}
    bUserEnable: BOOL := 1;

    (* Shortcut Commands *)
    // Start a move to fPosition with fVelocity
    bMoveCmd: BOOL;
    // Start the homing routine
    {attribute 'pytmc' := '
        pv: PLC:bHomeCmd
        io: io
        field: DESC Start the homing routine
    '}
    bHomeCmd: BOOL;

    (* Command Args *)
    // Used internally and by the IOC to pick what kind of move to do
    nCommand: INT;
    // Used internally and by the IOC to pass additional data to some commands
    nCmdData: INT;
    // Used internally and by the IOC to pick a destination for the move
    fPosition: LREAL;
    // Used internally and by the IOC to pick a move velocity
    fVelocity: LREAL;
    // Used internally and by the IOC to pick a move acceleration
    fAcceleration: LREAL;
    // Used internally and by the IOC to pick a move deceleration
    fDeceleration: LREAL;
    // Used internally and by the IOC to pick a home position
    {attribute 'pytmc' := '
        pv: PLC:fHomePosition
        io: io
        field: DESC Used internally and by the IOC to pick home position
    '}
    fHomePosition: LREAL;

    (* Info *)
    // Unique ID assigned to each axis in the NC
    nMotionAxisID: UDINT:=0;

    (* Returns *)
    // TRUE if done enabling
    bEnableDone: BOOL;
    // TRUE if in the middle of a command
    bBusy: BOOL;
    // TRUE if we've done a command and it has finished
    bDone: BOOL;
    // TRUE if the motor has been homed, or does not need to be homed
    bHomed: BOOL;
    // TRUE if we have safety permission to move
    bSafetyReady: BOOL;
    // TRUE if we're in an error state
    {attribute 'pytmc' := '
        pv: PLC:bError
        io: i
        field: ZNAM FALSE
        field: ONAM TRUE
        field: DESC TRUE if we are in an error state
        update: 100Hz notify
    '}
    bError: BOOL;
    // Error code if nonzero
    {attribute 'pytmc' := '
        pv: PLC:nErrorId
        io: i
        field: DESC Error code if nonzero
        update: 100Hz notify
    '}
    nErrorId: UDINT;
    // Message to identify the error state
    {attribute 'pytmc' := '
        pv: PLC:sErrorMessage
        io: i
        field: DESC Message to identify the error state
        update: 100Hz notify
    '}
    sErrorMessage: STRING;
    // Internal hook for custom error messages
    sCustomErrorMessage: STRING;
    // MC_ReadParameterSet Output
    stAxisParameters: ST_AxisParameterSet;
    // NC parameters that are exposed with pytmc pragmas
    {attribute 'pytmc' := '
        pv: PLC:AxisPar
        io: i
        field: DESC Axis configuration parameters in the numerical controller.
    '}
    stAxisParametersExposed: ST_AxisParameterSetExposed;
    // True if we've updated stAxisParameters at least once
    bAxisParamsInit: BOOL;

    // Misc axis status information for the IOC
    stAxisStatus: DUT_AxisStatus_v0_01;

    (* Other status information for users of the IOC *)
    // Position lag difference
    {attribute 'pytmc' := '
        pv: PLC:fPosDiff
        io: i
        field: DESC Position lag difference
    '}
    fPosDiff: LREAL;
	(* Backlash compensation*)
	// Enabled axis backlash compensation
    {attribute 'pytmc' := '
        pv: PLC:bBacklash
        io: io
        field: ZNAM FALSE
        field: ONAM TRUE
        field: DESC Enable Backlash compensation
    '}
    bBacklash: BOOL;
	
	// Enabled axis backlash compensation
    {attribute 'pytmc' := '
        pv: PLC:bBacklasStatus
        io: i
        field: ZNAM DISABLED
        field: ONAM ENABLED
        field: DESC Backlash compensation status
    '}
    bBacklashStatus: BOOL;
	
	// Backlash compensation value
    {attribute 'pytmc' := '
        pv: PLC:fBacklashCompensation
        io: io
        field: DESC Backlash compensation
    '}
    fBacklashCompensation: LREAL;
	
	// Current Backlash compensation value ?
    {attribute 'pytmc' := '
        pv: PLC:fCurrentBacklashCompensation
        io: i
        field: DESC Current Backlash compensation
    '}
    fCurrentBacklashCompensation: LREAL;
	
END_STRUCT
END_TYPE
]]></Declaration>
  </DUT>
</TcPlcObject>